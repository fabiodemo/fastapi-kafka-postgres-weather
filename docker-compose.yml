version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    expose:
      - "2181"
    tmpfs:
      - /opt/zookeeper-3.4.6/data

  kafka:
    image: wurstmeister/kafka:latest
    depends_on:
      - zookeeper
    expose:
      - 9092
    tmpfs:
      - /kafka
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://localhost:9094,OUTSIDE://kafka:9092
      KAFKA_LISTENERS: INSIDE://:9094,OUTSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      LOG4J_LOGGER_KAFKA_AUTHORIZER_LOGGER: DEBUG, authorizerAppender
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 10s
      retries: 5


    
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: weather_data
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  

  weather_producer:
    build: .
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER_URL: kafka:9092
      NOAA_TOKEN: ${NOAA_TOKEN}
    command: ["./wait-for-it.sh", "kafka:9092", "--", "python", "weather_producer.py"]
    

  weather_consumer:
    build: .
    depends_on:
      - kafka
      - postgres
    environment:
      KAFKA_BROKER_URL: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: weather_data
    command: ["./wait-for-it.sh", "kafka:9092", "--", "python", "weather_consumer.py"]

  web_app:
    build: .
    command: uvicorn web_app:app --host 0.0.0.0 --port 8000 --reload
    ports: 
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: weather_data